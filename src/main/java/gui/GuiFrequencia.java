/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import dao.DadosAluno;
import dao.DadosAulaEscalada;
import dao.DadosAulaFrequentada;
import dao.DadosInstrutor;
import dao.DadosEmpresa;
import dao.DadosEquipe;
import dao.DadosTipoPercurso;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.event.ItemEvent;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.scene.layout.Pane;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import model.Aluno;
import model.AulaEscalada;
import model.AulaFrequentada;
import model.Empresa;
import model.Funcao;
import model.Equipe;
import model.EstadoAluno;
import model.EstadoAulaEscalada;
import model.InfracaoCometida;
import model.Instrutor;
import model.TipoInfracao;
import model.TipoPercurso;

/**
 *
 * @author Ygor
 */
public class GuiFrequencia extends javax.swing.JInternalFrame {

    /**
     * Creates new form GuiTurma
     */
    public GuiFrequencia() {
        initComponents();
    }
    
    public static GuiFrequencia getInstance() {
        if (aberto) return null;
        aberto = true;
        return new GuiFrequencia();
    }
    
    private static boolean aberto = false;
    private boolean alterando = false;
    private boolean registrando = false;
    private boolean consultando = false;
    private static String cboInicialFiltrar = "Filtrar:";
    private static String cboInicialSelecionar = "Selecionar:";
    
    private DadosEmpresa dadosEmpresa = new DadosEmpresa();
    private DadosEquipe dadosEquipe = new DadosEquipe();
    private DadosAulaEscalada dadosAulaEscalada = new DadosAulaEscalada();
    private DadosAulaFrequentada dadosAulaFrequentada = new DadosAulaFrequentada();
    private DadosInstrutor dadosInstrutor = new DadosInstrutor();
    private DadosAluno dadosAluno = new DadosAluno();
    private final DadosTipoPercurso dadosTipoPercurso = new DadosTipoPercurso();
    
    private List<Empresa> empresas = new ArrayList<>();
    private List<Equipe> equipes = new ArrayList<>();
    private List<AulaEscalada> aulasEscaladas = new ArrayList<>();
    private List<AulaFrequentada> aulasFrequentadas = new ArrayList<>();
    private List<Instrutor> instrutores = new ArrayList<>();
    private List<Aluno> alunos = new ArrayList<>();
    private List<TipoPercurso> tiposPercurso = new ArrayList<>();
    
    private Empresa empresa;
    private Equipe equipe;
    private AulaEscalada aulaEscalada;
    private AulaFrequentada aulaFrequentada;
    private Instrutor instrutor;
    private TipoPercurso tipoPercurso;
    private Aluno aluno;
    private String numeroCarro;
    
    public Empresa getEmpresa() {
        return empresa;
    }

    public void setEmpresa(Empresa empresa) {
        this.empresa = empresa;
    }

    public AulaEscalada getAulaEscalada() {
        return aulaEscalada;
    }

    public void setAulaEscalada(AulaEscalada aulaEscalada) {
        this.aulaEscalada = aulaEscalada;
    }

    public AulaFrequentada getAulaFrequentada() {
        return aulaFrequentada;
    }

    public void setAulaFrequentada(AulaFrequentada aulaFrequentada) {
        this.aulaFrequentada = aulaFrequentada;
    }

    public Instrutor getInstrutor() {
        return instrutor;
    }

    public void setInstrutor(Instrutor instrutor) {
        this.instrutor = instrutor;
    }

    public TipoPercurso getTipoPercurso() {
        return tipoPercurso;
    }

    public void setTipoPercurso(TipoPercurso tipoPercurso) {
        this.tipoPercurso = tipoPercurso;
    }

    public Aluno getAluno() {
        return aluno;
    }

    public void setAluno(Aluno aluno) {
        this.aluno = aluno;
    }

    public String getNumeroCarro() {
        return numeroCarro;
    }

    public void setNumeroCarro(String numeroCarro) {
        this.numeroCarro = numeroCarro;
    }
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel4 = new javax.swing.JLabel();
        btnAlterar = new javax.swing.JToggleButton();
        lblEmpresa5 = new javax.swing.JLabel();
        cboEmpresa = new javax.swing.JComboBox<>();
        btnGravar = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblFrequencias = new javax.swing.JTable();
        lblEmpresa7 = new javax.swing.JLabel();
        cboEquipe = new javax.swing.JComboBox<>();
        cboAulaEscalada = new javax.swing.JComboBox<>();
        lblEmpresa8 = new javax.swing.JLabel();
        cboInstrutor = new javax.swing.JComboBox<>();
        lblEmpresa10 = new javax.swing.JLabel();
        btnRegistrarPenalidades = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        lblEmpresa11 = new javax.swing.JLabel();
        txtNumeroCarro = new javax.swing.JTextField();
        chbTodosInstrutor = new javax.swing.JCheckBox();
        btnConsultar = new javax.swing.JButton();
        btnLimpar = new javax.swing.JButton();
        lblEmpresa2 = new javax.swing.JLabel();
        rbtnAndamento = new javax.swing.JRadioButton();
        rbtnRealizada = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        chbTodosAula = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        cboPercurso = new javax.swing.JComboBox<>();
        btnDefinir = new javax.swing.JButton();
        btnAtualizar = new javax.swing.JButton();

        setClosable(true);
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Controle de Frequência");

        btnAlterar.setText("Alterar");
        btnAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlterarActionPerformed(evt);
            }
        });

        lblEmpresa5.setText("Empresa:");

        cboEmpresa.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Filtrar..." }));
        cboEmpresa.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboEmpresaItemStateChanged(evt);
            }
        });

        btnGravar.setText("Gravar");
        btnGravar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGravarActionPerformed(evt);
            }
        });

        tblFrequencias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Aluno", "Qtde Infra.", "Pontuação", "Presença", "Parecer"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblFrequencias.setColumnSelectionAllowed(true);
        tblFrequencias.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblFrequencias.getTableHeader().setReorderingAllowed(false);
        tblFrequencias.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblFrequenciasMouseReleased(evt);
            }
        });
        jScrollPane3.setViewportView(tblFrequencias);
        tblFrequencias.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (tblFrequencias.getColumnModel().getColumnCount() > 0) {
            tblFrequencias.getColumnModel().getColumn(1).setMinWidth(80);
            tblFrequencias.getColumnModel().getColumn(1).setPreferredWidth(80);
            tblFrequencias.getColumnModel().getColumn(1).setMaxWidth(80);
            tblFrequencias.getColumnModel().getColumn(2).setMinWidth(80);
            tblFrequencias.getColumnModel().getColumn(2).setPreferredWidth(80);
            tblFrequencias.getColumnModel().getColumn(2).setMaxWidth(80);
            tblFrequencias.getColumnModel().getColumn(3).setMinWidth(80);
            tblFrequencias.getColumnModel().getColumn(3).setPreferredWidth(80);
            tblFrequencias.getColumnModel().getColumn(3).setMaxWidth(80);
        }

        lblEmpresa7.setText("Equipe:");

        cboEquipe.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Filtrar..." }));
        cboEquipe.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboEquipeItemStateChanged(evt);
            }
        });

        cboAulaEscalada.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecionar" }));
        cboAulaEscalada.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboAulaEscaladaItemStateChanged(evt);
            }
        });

        lblEmpresa8.setText("Aula Escalada:");

        cboInstrutor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecionar" }));

        lblEmpresa10.setText("Instrutor:");

        btnRegistrarPenalidades.setText("Registrar Penalidades | Parecer");
        btnRegistrarPenalidades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarPenalidadesActionPerformed(evt);
            }
        });

        lblEmpresa11.setText("Número do Carro:");

        chbTodosInstrutor.setText("Exibir todos");
        chbTodosInstrutor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chbTodosInstrutorActionPerformed(evt);
            }
        });

        btnConsultar.setText("Consultar");
        btnConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarActionPerformed(evt);
            }
        });

        btnLimpar.setText("Limpar / Cancelar");
        btnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparActionPerformed(evt);
            }
        });

        lblEmpresa2.setText("Situação:");

        buttonGroup1.add(rbtnAndamento);
        rbtnAndamento.setText("Em Andamento");

        buttonGroup1.add(rbtnRealizada);
        rbtnRealizada.setText("Realizada");

        jButton1.setText("+ Registrar");

        chbTodosAula.setText("Exibir todos");
        chbTodosAula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chbTodosAulaActionPerformed(evt);
            }
        });

        jLabel1.setText("Percurso:");

        cboPercurso.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecionar" }));

        btnDefinir.setText("Definir");
        btnDefinir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDefinirActionPerformed(evt);
            }
        });

        btnAtualizar.setText("Atualizar");
        btnAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(lblEmpresa10)
                                .addGap(12, 12, 12)
                                .addComponent(chbTodosInstrutor))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(btnConsultar, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblEmpresa2)
                                        .addGap(6, 6, 6)
                                        .addComponent(rbtnAndamento)
                                        .addGap(6, 6, 6)
                                        .addComponent(rbtnRealizada))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jSeparator3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cboEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(cboEquipe, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(cboAulaEscalada, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblEmpresa5)
                                        .addGap(133, 133, 133)
                                        .addComponent(lblEmpresa7)
                                        .addGap(144, 144, 144)
                                        .addComponent(lblEmpresa8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(chbTodosAula))))
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 16, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jSeparator4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 553, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cboInstrutor, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(cboPercurso, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtNumeroCarro)
                                    .addComponent(lblEmpresa11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                                .addComponent(btnDefinir))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRegistrarPenalidades, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAtualizar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnGravar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 553, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(16, 16, 16)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1)
                            .addComponent(btnLimpar, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblEmpresa5)
                    .addComponent(lblEmpresa7)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblEmpresa8)
                        .addComponent(chbTodosAula)))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cboEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboEquipe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboAulaEscalada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(btnConsultar))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(lblEmpresa2))
                            .addComponent(rbtnAndamento)
                            .addComponent(rbtnRealizada))))
                .addGap(18, 18, 18)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblEmpresa10)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(chbTodosInstrutor)
                        .addComponent(jLabel1)
                        .addComponent(lblEmpresa11)))
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboInstrutor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboPercurso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNumeroCarro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDefinir))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAlterar)
                    .addComponent(btnRegistrarPenalidades)
                    .addComponent(btnGravar)
                    .addComponent(btnAtualizar))
                .addGap(12, 12, 12))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:
        Dimension d = this.getDesktopPane().getSize();
        this.setLocation((d.width - this.getSize().width) / 2, (d.height - this.getSize().height) / 2);
        
    }//GEN-LAST:event_formInternalFrameOpened

    private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameActivated
        // TODO add your handling code here:
        cboEmpresa.removeAllItems();
        cboEmpresa.addItem(cboInicialSelecionar);
        try {
            empresas = new DadosEmpresa().getList();
        } catch (Exception e) {

        }
        for (Empresa emp: empresas) {
            cboEmpresa.addItem(emp);
        }

        cboPercurso.removeAllItems();
        cboPercurso.addItem(cboInicialSelecionar);
        try {
            tiposPercurso = dadosTipoPercurso.getList();
        } catch (Exception ex) {
            Logger.getLogger(GuiFrequencia.class.getName()).log(Level.SEVERE, null, ex);
        }
        for (TipoPercurso percurso : tiposPercurso) {
            cboPercurso.addItem(percurso);
        }

        resetarTela();

    }//GEN-LAST:event_formInternalFrameActivated

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        // TODO add your handling code here:
        aberto = false;
    }//GEN-LAST:event_formInternalFrameClosed

    private void btnAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlterarActionPerformed
        // TODO add your handling code here:
        /*
        if (alterando) resetarTela();
        else {
            try {
                funcao = (Funcao) tblTurma.getValueAt(tblTurma.getSelectedRow(), 0);
                String descricaoFuncao = funcao.getDescricao();
                txtTurma.setText(descricaoFuncao);
                txtTurma.requestFocus();
                txtTurma.selectAll();
                alterando = true;
                btnAlterar.setText("Alterando");
                btnAlterar.setSelected(true);
                tblTurma.setEnabled(false);
            } catch (Exception headlessException) {
                JOptionPane.showMessageDialog(null, "Por favor, selecione uma função.");
                btnAlterar.setSelected(false);
            }
        }
        */
    }//GEN-LAST:event_btnAlterarActionPerformed

    private void btnGravarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGravarActionPerformed
        // TODO add your handling code here:
        int opcao
        = JOptionPane.showOptionDialog(null,
            "Esta aula se encontra em " + EstadoAulaEscalada.ANDAMENTO +
                    "\n Confirma a conclusão do relatório desta aula?",
            "Pergunta",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE, null,
            new String[]{"Sim", "Não."}, "Sim");

        if (opcao == 0) {
            
            // Verre a tabela
            int qtdLinhas = tblFrequencias.getRowCount();
            for (int i = qtdLinhas - 1; i >= 0; i--) {
                aluno = (Aluno) tblFrequencias.getValueAt(i, 0);
                // Verifica qual aula está sendo tratada
                for (AulaFrequentada aula : aluno.getAulasFrequentadas()) {
                    if (aula.getAulaEscalada().equals(aulaEscalada)) {
                        aulaFrequentada = aula;
                    }
                }
                // Define a presença/falta
                if (tblFrequencias.getValueAt(i, 3).equals(true)) {
                    aulaFrequentada.setPresenca(true);
                } else {
                    aulaFrequentada.setPresenca(false);
                }
            }
            
            aulaEscalada.concluirAula();

            try {
                dadosEquipe.alterar();
                dadosAluno.alterar();
                JOptionPane.showMessageDialog(null, "Aula concluída com sucesso!", "Gestão de Frequência", JOptionPane.INFORMATION_MESSAGE);
                resetarTela();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Não foi possível concluir esta operação.", "Gestão de Frequência", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnGravarActionPerformed

    private void cboEmpresaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboEmpresaItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED && cboEmpresa.getSelectedItem()!=cboInicialSelecionar) { // Restringe execução apenas em caso de seleção manual no combobox
            Empresa emp = (Empresa) cboEmpresa.getSelectedItem();
            
            cboEquipe.removeAllItems();
            cboEquipe.addItem(cboInicialFiltrar);
            try {
                equipes = dadosEquipe.getList();
            } catch (Exception e) {

            }
            for (Equipe equi : equipes) {
                if (equi.getEmpresa().equals(emp)) {
                    cboEquipe.addItem(equi);
                }
            }
            
            cboInstrutor.removeAllItems();
            cboInstrutor.addItem(cboInicialSelecionar);
            try {
                instrutores = dadosInstrutor.getList();
            } catch (Exception e) {

            }
            for (Instrutor inst : instrutores) {
                cboInstrutor.addItem(inst);
            }
            
        }
    }//GEN-LAST:event_cboEmpresaItemStateChanged

    private void cboEquipeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboEquipeItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED && cboEquipe.getSelectedItem()!=cboInicialFiltrar) { // Restringe execução apenas em caso de seleção manual no combobox
            Equipe equi = (Equipe) cboEquipe.getSelectedItem();
            
            cboAulaEscalada.removeAllItems();
            cboAulaEscalada.addItem(cboInicialSelecionar);

            for (AulaEscalada aula : equi.getAulasEscaladas()) {
                if (aula.getEstadoAulaEscalada().equals(EstadoAulaEscalada.ANDAMENTO)) {
                    cboAulaEscalada.addItem(aula);
                }
            }
        }
    }//GEN-LAST:event_cboEquipeItemStateChanged

    private void cboAulaEscaladaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboAulaEscaladaItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange()==ItemEvent.SELECTED && cboAulaEscalada.getSelectedItem()!=cboInicialSelecionar) { // Restringe execução apenas em caso de seleção manual no combobox
            aulaEscalada = (AulaEscalada) cboAulaEscalada.getSelectedItem();
            if(aulaEscalada.getEstadoAulaEscalada().equals(EstadoAulaEscalada.ANDAMENTO)) rbtnAndamento.setSelected(true);
            if(aulaEscalada.getEstadoAulaEscalada().equals(EstadoAulaEscalada.CONCLUIDO)) rbtnRealizada.setSelected(true);
        }
        btnConsultar.requestFocus();
    }//GEN-LAST:event_cboAulaEscaladaItemStateChanged

    private void btnRegistrarPenalidadesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarPenalidadesActionPerformed
        // TODO add your handling code here:
        try {
            aluno = (Aluno) tblFrequencias.getValueAt(tblFrequencias.getSelectedRow(), 0);
            
            // Marca presença para aluno a receber penalidades, caso esteja desmarcado.
            if (tblFrequencias.getValueAt(tblFrequencias.getSelectedRow(), 3).equals(false)) {
                tblFrequencias.setValueAt(true, tblFrequencias.getSelectedRow(), 3);
            }
        
            // Verifica qual aula frequentada está sendo tratada
            for (AulaFrequentada aula : aluno.getAulasFrequentadas()) {
                if (aula.getAulaEscalada().equals(aulaEscalada)) {
                    aulaFrequentada = aula;
                }
            }

            GuiRegPenalidade gp = GuiRegPenalidade.getInstance();
            gp.setAluno(aluno);
            gp.setAulaFrequentada(aulaFrequentada);
            gp.setVisible(true);

        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(null, "Por favor, selecione um aluno na lista.", "Registro de Penalidade", JOptionPane.ERROR_MESSAGE);
        }


        //preencherTabela();
    }//GEN-LAST:event_btnRegistrarPenalidadesActionPerformed

    private void chbTodosInstrutorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chbTodosInstrutorActionPerformed
        // TODO add your handling code here:
        if (chbTodosInstrutor.isSelected()) {
            cboInstrutor.removeAllItems();
            cboInstrutor.addItem(cboInicialSelecionar);
            try {
                instrutores = dadosInstrutor.getList();
            } catch (Exception e) {

            }
            for (Instrutor inst : instrutores) {
                cboInstrutor.addItem(inst);
            }
            
        } else if (cboEmpresa.getSelectedItem()!=cboInicialSelecionar){
            Empresa emp = (Empresa) cboEmpresa.getSelectedItem();
            cboInstrutor.removeAllItems();
            cboInstrutor.addItem(cboInicialSelecionar);
            try {
                instrutores = dadosInstrutor.getList();
            } catch (Exception e) {

            }
            for (Instrutor inst : instrutores) {
                if (inst.getEmpresaColaborador().equals(emp)) {
                    cboInstrutor.addItem(inst);
                }
            }
        } else if(cboEmpresa.getSelectedItem()==cboInicialSelecionar) {
            JOptionPane.showMessageDialog(null, "Por favor, selecione uma empresa.");
        }
    }//GEN-LAST:event_chbTodosInstrutorActionPerformed

    private void btnConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarActionPerformed
        // TODO add your handling code here:
        consultando = true;
        if (consultando && validarCamposConsulta()){
            aulaEscalada = (AulaEscalada) cboAulaEscalada.getSelectedItem();
            
            if (aulaEscalada.getEstadoAulaEscalada().equals(EstadoAulaEscalada.ANDAMENTO)) {
                int opcao
                = JOptionPane.showOptionDialog(null,
                    "Esta aula se encontra em " + EstadoAulaEscalada.ANDAMENTO +
                            "\n Deseja registrar o relatório desta aula?",
                    "Pergunta",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE, null,
                    new String[]{"Sim", "Não, apenas desejo consultar."}, "Sim");

                if (opcao == 0) {
                    prepararRelatorio();
                } else {
                    prepararConsulta();
                }
            }
            
            preencherTabelaConsulta();

        }
    }//GEN-LAST:event_btnConsultarActionPerformed

    private void btnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparActionPerformed
        // TODO add your handling code here:
        resetarTela();
    }//GEN-LAST:event_btnLimparActionPerformed

    private void chbTodosAulaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chbTodosAulaActionPerformed
        // TODO add your handling code here:
        if (chbTodosAula.isSelected() && cboEquipe.getSelectedItem()!=cboInicialSelecionar) {
            equipe = (Equipe) cboEquipe.getSelectedItem();
            cboAulaEscalada.removeAllItems();
            cboAulaEscalada.addItem(cboInicialSelecionar);
            
            for (AulaEscalada aula : equipe.getAulasEscaladas()) {
                cboAulaEscalada.addItem(aula);
            }
            
        } if (!chbTodosAula.isSelected() && cboEquipe.getSelectedItem()!=cboInicialSelecionar){
            equipe = (Equipe) cboEquipe.getSelectedItem();
            cboAulaEscalada.removeAllItems();
            cboAulaEscalada.addItem(cboInicialSelecionar);
            
            
            for (AulaEscalada aula : equipe.getAulasEscaladas()) {
                if (aula.getEstadoAulaEscalada().equals(EstadoAulaEscalada.ANDAMENTO))
                cboAulaEscalada.addItem(aula);
            }
            
        } if(cboEquipe.getSelectedItem()==cboInicialSelecionar){
            JOptionPane.showMessageDialog(null, "Por favor, selecione uma equipe.");
        }
    }//GEN-LAST:event_chbTodosAulaActionPerformed

    private void btnDefinirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDefinirActionPerformed
        // TODO add your handling code here:
        if (validarCamposDefinir()) {
            prepararDefinicao();
            
            aulaEscalada = (AulaEscalada) cboAulaEscalada.getSelectedItem();
            instrutor = (Instrutor) cboInstrutor.getSelectedItem();
            tipoPercurso = (TipoPercurso) cboPercurso.getSelectedItem();
            numeroCarro = txtNumeroCarro.getText();
            
            int qtdLinhas = tblFrequencias.getRowCount();
            for (int i = qtdLinhas - 1; i >= 0; i--) {
                aluno = (Aluno) tblFrequencias.getValueAt(i, 0);
                aluno.inserirAulaFrequentada(aulaEscalada, instrutor, tipoPercurso, numeroCarro, false);
            }
            
        }
    }//GEN-LAST:event_btnDefinirActionPerformed

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        // TODO add your handling code here:

    }//GEN-LAST:event_formFocusGained

    private void btnAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarActionPerformed
        // TODO add your handling code here:
        if (registrando) {
            aluno = (Aluno) tblFrequencias.getValueAt(tblFrequencias.getSelectedRow(), 0);
            atualizarTabela(aluno);
        }
    }//GEN-LAST:event_btnAtualizarActionPerformed

    private void tblFrequenciasMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblFrequenciasMouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_tblFrequenciasMouseReleased
    public void preencherTabelaConsulta() {
        DefaultTableModel tbl = (DefaultTableModel) tblFrequencias.getModel();
        tblFrequencias.setRowSorter(new TableRowSorter(tbl));

        int qtdLinhas = tbl.getRowCount();
        for (int i = qtdLinhas - 1; i >= 0; i--) {
            tbl.removeRow(0);
        }

        try {
           alunos = new DadosAluno().getList();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Nenhum aluno encontrado!", "Frequência", JOptionPane.ERROR_MESSAGE);
        }
        
        equipe = (Equipe) cboEquipe.getSelectedItem();
        for (Aluno al : alunos) {
            if (al.getEstadoAluno().equals(EstadoAluno.MATRICULADO) && al.getEquipeAluno().equals(equipe)) {
                Object linha [] = {al};
                tbl.addRow(linha);
            }
        }

    }
   
    
    public void resetarTela() {
        DefaultTableModel tbl = (DefaultTableModel) tblFrequencias.getModel();
        int qtdLinhas = tbl.getRowCount();
        for (int i = qtdLinhas -1; i>= 0; i--) {
            tbl.removeRow(0);
        }
        consultando = false;
        alterando = false;
        registrando = false;
        cboEmpresa.setEnabled(true);
        cboEmpresa.setSelectedIndex(0);
        cboEquipe.setEnabled(true);
        cboEquipe.setSelectedIndex(0);
        cboAulaEscalada.setEnabled(true);
        cboAulaEscalada.setSelectedIndex(0);
        cboInstrutor.setEnabled(false);
        cboInstrutor.setSelectedIndex(0);
        chbTodosInstrutor.setEnabled(false);
        cboPercurso.setEnabled(false);
        txtNumeroCarro.setEnabled(false);
        txtNumeroCarro.setText("");
        btnGravar.setEnabled(false);
        btnDefinir.setEnabled(false);
        btnRegistrarPenalidades.setEnabled(false);
        btnAlterar.setEnabled(false);
        btnConsultar.setEnabled(true);
        tblFrequencias.setEnabled(false);
        rbtnAndamento.setEnabled(false);
        rbtnRealizada.setEnabled(false);
        chbTodosAula.setSelected(false);
        chbTodosAula.setEnabled(true);
        chbTodosInstrutor.setSelected(false);
        chbTodosAula.setEnabled(true);
    }
    
    private void prepararConsulta() {
        consultando = true;
        btnConsultar.setEnabled(true);
        tblFrequencias.setEnabled(true);
        chbTodosInstrutor.setEnabled(false);
        cboInstrutor.setEnabled(false);
        cboPercurso.setEnabled(false);
        txtNumeroCarro.setEnabled(false);
        btnGravar.setEnabled(false);
        btnRegistrarPenalidades.setEnabled(false);
        btnAlterar.setEnabled(false);
    }
    
    private void prepararRelatorio() {
        registrando = true;
        consultando = false;
        alterando = false;
        cboEmpresa.setEnabled(false);
        cboEquipe.setEnabled(false);
        cboAulaEscalada.setEnabled(false);
        chbTodosAula.setEnabled(false);
        btnConsultar.setEnabled(false);
        chbTodosInstrutor.setEnabled(true);
        cboInstrutor.setEnabled(true);
        cboInstrutor.requestFocus();
        cboPercurso.setEnabled(true);
        txtNumeroCarro.setEnabled(true);
        tblFrequencias.setEnabled(false);
        btnGravar.setEnabled(false);
        btnRegistrarPenalidades.setEnabled(false);
        btnAlterar.setEnabled(false);
        btnDefinir.setEnabled(true);
        
        // aulaFrequentada = new AulaFrequentada(instrutor, tipoPercurso, ERROR, closable)
    }
    
    private void prepararDefinicao() {
        registrando = true;
        consultando = false;
        alterando = false;
        cboInstrutor.setEnabled(false);
        cboPercurso.setEnabled(false);
        txtNumeroCarro.setEnabled(false);
        tblFrequencias.setEnabled(true);
        btnRegistrarPenalidades.setEnabled(true);
        btnGravar.setEnabled(true);
        btnDefinir.setEnabled(false);
    }
    
    public void atualizarTabela(Aluno aluno) {
        DefaultTableModel tbl = (DefaultTableModel) tblFrequencias.getModel();
        
        for (AulaFrequentada aula : aluno.getAulasFrequentadas()) {
            if (aula.getAulaEscalada().equals(aulaEscalada)) {
                aulaFrequentada = aula;
            }
        }
        
        int totalPontuacaoAtual = 0;
        for (InfracaoCometida infracao : aulaFrequentada.getInfracoesCometidas()) {
            totalPontuacaoAtual += infracao.getTipoInfracao().getContextoTipoInfracao().getPontuacao();
        }
        
        tbl.setValueAt(aluno, tblFrequencias.getSelectedRow(), 0);
        tbl.setValueAt(aulaFrequentada.getInfracoesCometidas().size(), tblFrequencias.getSelectedRow(), 1);
        tbl.setValueAt(totalPontuacaoAtual, tblFrequencias.getSelectedRow(), 2);
        tbl.setValueAt(true, tblFrequencias.getSelectedRow(), 3);
        tbl.setValueAt(aulaFrequentada.getDescricaoParecer(), tblFrequencias.getSelectedRow(), 4);

    }
    
    public boolean validarCamposDefinir() {
        if (cboInstrutor.getSelectedItem().equals(cboInicialSelecionar)) {
            JOptionPane.showMessageDialog(null, "Selecione um instrutor.");
            cboInstrutor.showPopup();
            return false;
        }
        
        if (cboPercurso.getSelectedItem().equals(cboInicialSelecionar)) {
            JOptionPane.showMessageDialog(null, "Selecione um percurso.");
            cboPercurso.showPopup();
            return false;
        }
        
        if(!(txtNumeroCarro.getText().length() > 0)) {
            JOptionPane.showMessageDialog(null, "Informe o número do carro.");
            txtNumeroCarro.requestFocus();
            return false;
        }
        
        return true;
    }
    
    private boolean validarCamposConsulta() {
        if(cboEquipe.getSelectedItem().equals(cboInicialFiltrar)) {
            JOptionPane.showMessageDialog(null, "Selecione uma equipe", "Gestão de Frequência", JOptionPane.ERROR_MESSAGE);
            cboEquipe.showPopup();
            return false;
        }
        if(cboAulaEscalada.getSelectedItem().equals(cboInicialSelecionar)) {
            JOptionPane.showMessageDialog(null, "Selecione uma aula escalada", "Gestão de Frequência", JOptionPane.ERROR_MESSAGE);
            cboAulaEscalada.showPopup();
            return false;
        }
        return true;
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnAlterar;
    private javax.swing.JButton btnAtualizar;
    private javax.swing.JButton btnConsultar;
    private javax.swing.JButton btnDefinir;
    private javax.swing.JButton btnGravar;
    private javax.swing.JButton btnLimpar;
    private javax.swing.JButton btnRegistrarPenalidades;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<Object> cboAulaEscalada;
    private javax.swing.JComboBox<Object> cboEmpresa;
    private javax.swing.JComboBox<Object> cboEquipe;
    private javax.swing.JComboBox<Object> cboInstrutor;
    private javax.swing.JComboBox<Object> cboPercurso;
    private javax.swing.JCheckBox chbTodosAula;
    private javax.swing.JCheckBox chbTodosInstrutor;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JLabel lblEmpresa10;
    private javax.swing.JLabel lblEmpresa11;
    private javax.swing.JLabel lblEmpresa2;
    private javax.swing.JLabel lblEmpresa5;
    private javax.swing.JLabel lblEmpresa7;
    private javax.swing.JLabel lblEmpresa8;
    private javax.swing.JRadioButton rbtnAndamento;
    private javax.swing.JRadioButton rbtnRealizada;
    private javax.swing.JTable tblFrequencias;
    private javax.swing.JTextField txtNumeroCarro;
    // End of variables declaration//GEN-END:variables
}
