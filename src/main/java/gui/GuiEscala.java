/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import dao.DadosAulaEscalada;
import dao.DadosEmpresa;
import dao.DadosEquipe;
import java.awt.Dimension;
import java.awt.event.ItemEvent;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import model.AulaEscalada;
import model.Empresa;
import model.Equipe;
import model.EstadoAulaEscalada;


/**
 *
 * @author Ygor
 */
public class GuiEscala extends javax.swing.JInternalFrame {
    
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
    
    Equipe equipe;
    
    private static boolean aberto = false;
    private boolean cadastrando = false;
    private boolean consultando = true;
    
    private final DadosEquipe dadosEquipe = new DadosEquipe();
    private final DadosAulaEscalada dadosAulaEscalada = new DadosAulaEscalada();
    private List<Empresa> empresas = new ArrayList<>();
    private List<Equipe> equipes = new ArrayList<>();
    private List<AulaEscalada> aulasEscaladas = new ArrayList<>();

    private final String cboInicialFiltrar = "Filtrar:";
    private final String cboInicialSelecionar = "Selecione:";
    
    /**
     * Creates new form GuiTurma
     */
    public GuiEscala() {
        initComponents();
    }
    
    public static GuiEscala getInstance() {
        if (aberto) return null;
        aberto = true;
        return new GuiEscala();
    }
    

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel4 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        btnRemover = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblEscala = new javax.swing.JTable();
        btnVoltar1 = new javax.swing.JButton();
        btnEscalar = new javax.swing.JToggleButton();
        jSeparator1 = new javax.swing.JSeparator();
        btnLimpar = new javax.swing.JButton();
        pnlDados = new javax.swing.JPanel();
        btnGravar = new javax.swing.JButton();
        rbtnTodas = new javax.swing.JRadioButton();
        rbtnRealizada = new javax.swing.JRadioButton();
        rbtnAndamento = new javax.swing.JRadioButton();
        lblEmpresa2 = new javax.swing.JLabel();
        lblEmpresaTime = new javax.swing.JLabel();
        cboEmpresa = new javax.swing.JComboBox<>();
        lblTimeTime = new javax.swing.JLabel();
        cboEquipe = new javax.swing.JComboBox<>();
        lblDataTime = new javax.swing.JLabel();
        txtData = new javax.swing.JFormattedTextField();

        setClosable(true);
        setMaximizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Escala de Equipes");

        btnRemover.setText("Excluir Escala");
        btnRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverActionPerformed(evt);
            }
        });

        tblEscala.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Equipe", "Data", "Situação"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblEscala.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblEscalaMousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(tblEscala);

        btnVoltar1.setText("Voltar");

        btnEscalar.setText("+ Novo");
        btnEscalar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEscalarActionPerformed(evt);
            }
        });

        btnLimpar.setText("Limpar");
        btnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparActionPerformed(evt);
            }
        });

        pnlDados.setBackground(new java.awt.Color(220, 220, 220));
        pnlDados.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnGravar.setText("Consultar");
        btnGravar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGravarActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbtnTodas);
        rbtnTodas.setText("Todas");

        buttonGroup1.add(rbtnRealizada);
        rbtnRealizada.setText("Realizada");

        buttonGroup1.add(rbtnAndamento);
        rbtnAndamento.setText("Em Andamento");

        lblEmpresa2.setText("Situação:");

        lblEmpresaTime.setText("Empresa:");

        cboEmpresa.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboEmpresaItemStateChanged(evt);
            }
        });

        lblTimeTime.setText("Equipe:");

        lblDataTime.setText("Data da Aula:");

        try {
            txtData.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtData.setMinimumSize(new java.awt.Dimension(12, 26));
        txtData.setPreferredSize(new java.awt.Dimension(42, 26));
        txtData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlDadosLayout = new javax.swing.GroupLayout(pnlDados);
        pnlDados.setLayout(pnlDadosLayout);
        pnlDadosLayout.setHorizontalGroup(
            pnlDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDadosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cboEmpresa, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlDadosLayout.createSequentialGroup()
                        .addGroup(pnlDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblEmpresaTime)
                            .addComponent(btnGravar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 77, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(pnlDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlDadosLayout.createSequentialGroup()
                        .addGroup(pnlDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTimeTime)
                            .addComponent(cboEquipe, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDataTime)
                            .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlDadosLayout.createSequentialGroup()
                        .addComponent(lblEmpresa2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbtnAndamento)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbtnRealizada)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbtnTodas)))
                .addGap(24, 24, 24))
        );
        pnlDadosLayout.setVerticalGroup(
            pnlDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDadosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmpresaTime)
                    .addComponent(lblTimeTime)
                    .addComponent(lblDataTime))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboEquipe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(pnlDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblEmpresa2)
                        .addComponent(rbtnAndamento)
                        .addComponent(rbtnRealizada)
                        .addComponent(rbtnTodas))
                    .addComponent(btnGravar, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pnlDadosLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cboEmpresa, cboEquipe, txtData});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlDados, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnEscalar, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnRemover)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnVoltar1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnEscalar)
                            .addComponent(btnLimpar)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlDados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnRemover)
                    .addComponent(btnVoltar1))
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:
        Dimension d = this.getDesktopPane().getSize();
        this.setLocation((d.width - this.getSize().width) / 2, (d.height - this.getSize().height) / 2);
        
    }//GEN-LAST:event_formInternalFrameOpened

    private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameActivated
        // TODO add your handling code here:
        resetarTela();
        preencherCboEmpresa();
        preencherTabelaGeralAndamento();    

    }//GEN-LAST:event_formInternalFrameActivated

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        // TODO add your handling code here:
        aberto = false;
    }//GEN-LAST:event_formInternalFrameClosed

    private void btnRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverActionPerformed
        // TODO add your handling code here:
        try {
           // Equipe equi = (Equipe) tblEscala.getValueAt(tblEscala.getSelectedRow(), 0);
            AulaEscalada aula = (AulaEscalada) tblEscala.getValueAt(tblEscala.getSelectedRow(), 1);

            if (validarRemocao(aula)) {
                int opcao
                = JOptionPane.showOptionDialog(null,
                    "Confirma a exclusão?",
                    "Pergunta",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE, null,
                    new String[]{"Sim", "Não"}, "Sim");

                if (opcao == 0) {
                    //equi.removerAulaEscalada(aula);
                    //dadosEquipe.alterar();
                    try {
                        dadosAulaEscalada.remover(aula);
                    } catch (Exception ex) {
                        Logger.getLogger(GuiEscala.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    JOptionPane.showMessageDialog(rootPane, "Aula removida com sucesso.");
                }
                resetarTela();
                preencherTabelaGeralAndamento();
this.dispose(); // Não consegui atualizar os objetos das CBO. Por isso, após removar uma aula, não era possivel cadastrar dnv, pois usava o objeto Empresa antigo
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Por favor, selecione uma aula.");
        }
    }//GEN-LAST:event_btnRemoverActionPerformed

    private void txtDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDataActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDataActionPerformed

    private void cboEmpresaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboEmpresaItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED && cboEmpresa.getSelectedItem()!=cboInicialFiltrar && cboEmpresa.getItemCount()>0) { // Restringe execução apenas em caso de seleção manual no combobox
            Empresa emp = (Empresa) cboEmpresa.getSelectedItem();
            preencherCboEquipe(emp);
        } else if (cboEmpresa.getSelectedItem().equals(cboInicialFiltrar)) {
            cboEquipe.removeAllItems();
            cboEquipe.addItem(cboInicialSelecionar);
        }

    }//GEN-LAST:event_cboEmpresaItemStateChanged

    private void tblEscalaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblEscalaMousePressed
        // TODO add your handling code here:
        btnRemover.setEnabled(true);
    }//GEN-LAST:event_tblEscalaMousePressed

    private void btnEscalarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEscalarActionPerformed
        // TODO add your handling code here:
        if (cadastrando) {
            resetarTela();
            preencherTabelaGeralAndamento();
        }
        else {
            prepararCadastro();
        }
    }//GEN-LAST:event_btnEscalarActionPerformed

    private void btnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparActionPerformed
        // TODO add your handling code here:
        preencherTabelaGeralAndamento();
        resetarTela();
    }//GEN-LAST:event_btnLimparActionPerformed

    private void btnGravarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGravarActionPerformed
        // TODO add your handling code here:
        if (consultando && validarCamposConsulta()) {
            equipe = (Equipe) cboEquipe.getSelectedItem();
            prepararConsulta();
            if (rbtnAndamento.isSelected()) preencherTabelaConsultaAndamento(equipe);
            else if (rbtnRealizada.isSelected()) preencherTabelaConsultaRealizada(equipe);
            else if (rbtnTodas.isSelected()) preencherTabelaConsultaTodas(equipe);

        } else if (cadastrando && validarCamposGravar()) {
            equipe = (Equipe) cboEquipe.getSelectedItem();
            LocalDate data = LocalDate.parse(txtData.getText(), formatter);
            try {
                AulaEscalada aula = new AulaEscalada(equipe, data);
                //equipe.inserirAulaEscalada(data);
                try {
                    new DadosAulaEscalada().incluir(aula);
                    //dadosEquipe.alterar();
                    JOptionPane.showMessageDialog(null, "Escala registrada com sucesso!", "Escala de Equipes", JOptionPane.INFORMATION_MESSAGE);
                    int opcao
                    = JOptionPane.showOptionDialog(null,
                        "Continuar Escalando?",
                        "Pergunta",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE, null,
                        new String[]{"Sim", "Não"}, "Sim");
                    if (opcao == 1) {
                        preencherTabelaGeralAndamento();
                        resetarTela();
                        //preencherCboEmpresa();
                        
                    } else if (opcao == 0) {
                        preencherTabelaGeralAndamento();
                        btnEscalar.doClick();
                        consultando = false;
                        cadastrando = true;
                        cboEmpresa.setSelectedItem(equipe.getEmpresa());
                        cboEquipe.setSelectedItem(equipe);
                        txtData.requestFocus();
                    }
                } catch (Exception ex) {
                    Logger.getLogger(GuiEscala.class.getName()).log(Level.SEVERE, null, ex);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage(), "Escala de Equipes", JOptionPane.ERROR_MESSAGE);
            }

            
        }
    }//GEN-LAST:event_btnGravarActionPerformed
    public void preencherTabelaGeralAndamento() {
        DefaultTableModel tbl = (DefaultTableModel) tblEscala.getModel();
        tblEscala.setRowSorter(new TableRowSorter(tbl));

        int qtdLinhas = tblEscala.getRowCount();
        for (int i = qtdLinhas - 1; i >= 0; i--) {
            tbl.removeRow(0);
        }
        
        try {
            aulasEscaladas = dadosAulaEscalada.getList();
        } catch (Exception ex) {
            Logger.getLogger(GuiEscala.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        for (AulaEscalada aulaEscalada : aulasEscaladas) {
            if (aulaEscalada.getEstadoAulaEscalada().equals(EstadoAulaEscalada.ANDAMENTO)) {
                Object linha [] = {aulaEscalada.getEquipe(), aulaEscalada, aulaEscalada.getEstadoAulaEscalada()};
                tbl.addRow(linha);
            }
        }
        
        /*
        try {
            equipes = new DadosEquipe().getList();
        } catch (Exception ex) {
            Logger.getLogger(GuiEscala.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        for (Equipe equi : equipes) {
            for (AulaEscalada aulaEscalada : equi.getAulasEscaladas()) {
                //Collections.sort(equi.getAulasEscaladas(), Comparator.comparing(AulaEscalada::getDataAulaEscalada)); // ordena por data
                if (aulaEscalada.getEstadoAulaEscalada().equals(EstadoAulaEscalada.ANDAMENTO)) {
                    Object linha [] = {equi, aulaEscalada, aulaEscalada.getEstadoAulaEscalada()};
                    tbl.addRow(linha);
                }
            }
        }
        */
        
        resetarTela();
    }
    
    public void preencherTabelaConsultaAndamento(Equipe equipe) {
        DefaultTableModel tbl = (DefaultTableModel) tblEscala.getModel();
        tblEscala.setRowSorter(new TableRowSorter(tbl));

        int qtdLinhas = tblEscala.getRowCount();
        for (int i = qtdLinhas - 1; i >= 0; i--) {
            tbl.removeRow(0);
        }

        for (AulaEscalada aulaEscalada : aulasEscaladas) {
            if (aulaEscalada.getEstadoAulaEscalada().equals(EstadoAulaEscalada.ANDAMENTO)) {
                Object linha [] = {aulaEscalada.getEquipe(), aulaEscalada, aulaEscalada.getEstadoAulaEscalada()};
                tbl.addRow(linha);
            }
        }
        resetarTela();
    }
        
    public void preencherTabelaConsultaRealizada(Equipe equipe) {        
        DefaultTableModel tbl = (DefaultTableModel) tblEscala.getModel();
        tblEscala.setRowSorter(new TableRowSorter(tbl));

        int qtdLinhas = tblEscala.getRowCount();
        for (int i = qtdLinhas - 1; i >= 0; i--) {
            tbl.removeRow(0);
        }
        
        for (AulaEscalada aulaEscalada : aulasEscaladas) {
            if (aulaEscalada.getEstadoAulaEscalada().equals(EstadoAulaEscalada.ANDAMENTO) && aulaEscalada.getEquipe().equals(equipe)) {
                Object linha [] = {aulaEscalada.getEquipe(), aulaEscalada, aulaEscalada.getEstadoAulaEscalada()};
                tbl.addRow(linha);
            }
        }
        resetarTela();
    }
        
    public void preencherTabelaConsultaTodas(Equipe equipe) {
        DefaultTableModel tbl = (DefaultTableModel) tblEscala.getModel();
        tblEscala.setRowSorter(new TableRowSorter(tbl));

        int qtdLinhas = tblEscala.getRowCount();
        for (int i = qtdLinhas - 1; i >= 0; i--) {
            tbl.removeRow(0);
        }

        for (AulaEscalada aulaEscalada : aulasEscaladas) {
            if (aulaEscalada.getEquipe().equals(equipe)) {
                Object linha [] = {aulaEscalada.getEquipe(), aulaEscalada, aulaEscalada.getEstadoAulaEscalada()};
                tbl.addRow(linha);
            }
        }
        
        if (tbl.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "Nenhum registro localizado.");
            preencherTabelaGeralAndamento();
        }
        
        resetarTela();
    }
    
    public void preencherCboEmpresa() {
        cboEmpresa.removeAllItems();
        cboEmpresa.addItem(cboInicialFiltrar);

        try {
            empresas = new DadosEmpresa().getList();
        } catch (Exception e) {
            
        }
        for (Empresa emp: empresas) {
            cboEmpresa.addItem(emp);
        }
    }
    
    public void preencherCboEquipe(Empresa empresa) {
        cboEquipe.removeAllItems();
        cboEquipe.addItem(cboInicialSelecionar);

        try {
            equipes = new DadosEquipe().getList();
        } catch (Exception e) {
            
        }
        
        for (Equipe eq : equipes) {
            if (eq.getEmpresa().equals(empresa)) cboEquipe.addItem(eq);
        }
    }
    
    public void resetarTela() {
        cboEmpresa.setSelectedItem(0);
        cboEquipe.setSelectedItem(0);
        cboEmpresa.setEnabled(true);
        cboEquipe.setEnabled(true);
        btnLimpar.setEnabled(true);
        btnRemover.setEnabled(false);
        btnEscalar.setText("+ Novo");
        btnEscalar.setEnabled(true);
        btnEscalar.setSelected(false);
        btnGravar.setText("Consultar");
        btnGravar.setEnabled(true);
        txtData.setEnabled(true);
        btnRemover.setEnabled(true);
        rbtnAndamento.setSelected(true);
        rbtnAndamento.setEnabled(true);
        rbtnRealizada.setEnabled(true);
        rbtnTodas.setEnabled(true);
        tblEscala.setEnabled(true);
        pnlDados.setEnabled(false);
        txtData.setEnabled(false);
        cadastrando = false;
        consultando = true;
        LocalDate localDate = LocalDate.now().plusDays(1);//For reference
        txtData.setText(localDate.format(formatter));
    }
    
    public boolean validarCamposGravar() {
        if(cboEquipe.getSelectedItem().equals(cboInicialSelecionar)) {
            JOptionPane.showMessageDialog(null, "Selecione uma equipe", "Escala de Equipes", JOptionPane.ERROR_MESSAGE);
            cboEquipe.showPopup();
            return false;
        }
        
        if(!(txtData.getText().length() > 0)) {
            JOptionPane.showMessageDialog(null, "Informe a data de início da turma.", "Escala de Equipes", JOptionPane.ERROR_MESSAGE);
            txtData.requestFocus();
            return false;
        }
        
        try {
            LocalDate data = LocalDate.parse(txtData.getText(), formatter);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Data inválida.", "Escala de Equipes", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        return true;
    }
    
    public boolean validarCamposConsulta() {
        if(cboEquipe.getSelectedItem().equals(cboInicialSelecionar)) {
            JOptionPane.showMessageDialog(null, "Selecione uma equipe", "Escala de Equipes", JOptionPane.ERROR_MESSAGE);
            cboEquipe.showPopup();
            return false;
        }
        return true;
    }
    
    public boolean validarRemocao(AulaEscalada aulaEscalada) {
        if (aulaEscalada.getEstadoAulaEscalada().equals(EstadoAulaEscalada.CONCLUIDO)) {
            JOptionPane.showMessageDialog(null, "Impossível remover uma aula já concluída.", "Escala de Equipes", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }
    
    private void prepararConsulta() {
        consultando = true;
        btnGravar.setText("Cancelar");
        btnGravar.setEnabled(true);
        tblEscala.setEnabled(true);
    }
    
    private void prepararCadastro() {
        btnLimpar.setEnabled(true);
        cboEmpresa.setEnabled(true);
        txtData.setEnabled(true);
        pnlDados.setEnabled(true);
        btnEscalar.setText("Escalando");
        btnEscalar.setSelected(true);
        btnGravar.setText("Gravar");
        btnRemover.setEnabled(false);
        cadastrando = true;
        consultando = false;
        cboEquipe.setEnabled(true);
        cboEquipe.setSelectedIndex(0);
        rbtnAndamento.setEnabled(false);
        rbtnRealizada.setEnabled(false);
        rbtnTodas.setEnabled(false);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnEscalar;
    private javax.swing.JButton btnGravar;
    private javax.swing.JButton btnLimpar;
    private javax.swing.JButton btnRemover;
    private javax.swing.JButton btnVoltar1;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<Object> cboEmpresa;
    private javax.swing.JComboBox<Object> cboEquipe;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblDataTime;
    private javax.swing.JLabel lblEmpresa2;
    private javax.swing.JLabel lblEmpresaTime;
    private javax.swing.JLabel lblTimeTime;
    private javax.swing.JPanel pnlDados;
    private javax.swing.JRadioButton rbtnAndamento;
    private javax.swing.JRadioButton rbtnRealizada;
    private javax.swing.JRadioButton rbtnTodas;
    private javax.swing.JTable tblEscala;
    private javax.swing.JFormattedTextField txtData;
    // End of variables declaration//GEN-END:variables
}
